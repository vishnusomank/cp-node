{{- if .Values.rmq.deploy }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.rmq.name}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.rmq.name}}
  template:
    metadata:
      labels:
        app: {{ .Values.rmq.name}}
    spec:
      containers:
      - name: {{ .Values.rmq.name}}
        image: {{ .Values.rmq.image}}
        imagePullPolicy: {{ .Values.rmq.imagePullPolicy}}
        volumeMounts:
        - name: config-volume
          mountPath: /etc/rabbitmq/rabbitmq.conf
          subPath: rabbitmq.conf
        - name: config-volume
          mountPath: /etc/rabbitmq/definitions.json
          subPath: definitions.json
        - name: tls-volume
          mountPath: /etc/ssl/ca_certificate.pem
          subPath: ca_certificate.pem
        - name: tls-volume
          mountPath: /etc/ssl/certificate.pem
          subPath: certificate.pem
        - name: tls-volume
          mountPath: /etc/ssl/key.pem
          subPath: key.pem
        - name: rmq-pvc
          mountPath: /var/lib/rabbitmq/mnesia/
        resources:
          limits:
            cpu: "2"
            memory: 2Gi
          requests:
            cpu: "1"
            memory: 2Gi
      volumes:
      - name: config-volume
        configMap:
          name: "rabbitmq-config"
      - name: tls-volume
        secret:
          secretName: "rabbitmq-tls"
  volumeClaimTemplates:
  - metadata:
      name: rmq-pvc
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi
{{- end }}